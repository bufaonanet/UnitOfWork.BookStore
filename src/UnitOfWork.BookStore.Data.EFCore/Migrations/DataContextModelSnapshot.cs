// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnitOfWork.BookStore.Data.EFCore.Context;

#nullable disable

namespace UnitOfWork.BookStore.Data.EFCore.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Customer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Douglas Souto"
                        });
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric(38,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(38,2)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Domain-Driven Design: Tackling Complexity in the Heart of Software",
                            Price = 74.99m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Agile Principles, Patterns, and Practices in C#",
                            Price = 215.41m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clean Code: A Handbook of Agile Software Craftsmanship",
                            Price = 95.17m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Implementing Domain-Driven Design",
                            Price = 126.30m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Patterns, Principles, and Practices of Domain-Driven Design",
                            Price = 311.58m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Refactoring: Improving the Design of Existing Code",
                            Price = 112.88m
                        });
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Stock", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("Stock", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Quantity = 25
                        },
                        new
                        {
                            ProductId = 2,
                            Quantity = 12
                        },
                        new
                        {
                            ProductId = 3,
                            Quantity = 55
                        },
                        new
                        {
                            ProductId = 4,
                            Quantity = 8
                        },
                        new
                        {
                            ProductId = 5,
                            Quantity = 14
                        },
                        new
                        {
                            ProductId = 6,
                            Quantity = 16
                        });
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Order", b =>
                {
                    b.HasOne("UnitOfWork.BookStore.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("UnitOfWork.BookStore.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnitOfWork.BookStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Stock", b =>
                {
                    b.HasOne("UnitOfWork.BookStore.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("UnitOfWork.BookStore.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
